#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
spring.application.name=${rootArtifactId}

#
# Server settings
#server.port=18080
server.servlet.context-path=/

#
# Nacos Settings
nacos.config.server-addr=
nacos.config.namespace=

# Mybatis Settings
mybatis.mapper-locations=classpath*:mappers/*.xml
# 指定 Mybatis 的实体目录
mybatis.type-aliases-package=${package}.infrastructure.entity
mybatis.config-location=classpath:mybatis-config.xml

# Pagehelper Settings
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=false
pagehelper.params=count=countSql
pagehelper.page-size-zero=true

# 应用服务 WEB 访问端口
server.port=18080
# 下面是配置undertow作为服务器的参数
# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.threads.io=4
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
server.undertow.threads.worker=20
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分
server.undertow.buffer-size=1024
# 是否分配的直接内存
server.undertow.direct-buffers=true
spring.datasource.initialization-mode:always

#jdbc基本配置
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/demo?characterEncoding=utf8&useSSL=false&zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai
spring.datasource.username=root
spring.datasource.password=root
# 连接池配置
spring.datasource.druid.initial-size=5
spring.datasource.druid.min-idle=5
spring.datasource.druid.max-active=20
# 连接等待超时时间
spring.datasource.druid.max-wait=30000
# 配置检测可以关闭的空闲连接间隔时间
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置连接在池中的最小生存时间
spring.datasource.druid.min-evictable-idle-time-millis=300000
spring.datasource.druid.validation-query=select 'x'
spring.datasource.druid.test-while-idle=true
spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-open-prepared-statements=20
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
# 配置监控统计拦截的filters, 去掉后监控界面sql无法统计, 'wall'用于防火墙
spring.datasource.druid.filters=stat,wall
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
spring.datasource.druid.aop-patterns=${package}.*.service.*

# dubbo 协议
dubbo.protocol.id=dubbo
dubbo.protocol.name=dubbo
dubbo.application.name=${rootArtifactId}
dubbo.provider.timeout=60000
dubbo.provider.version=1.0.0
dubbo.consumer.check=false
dubbo.consumer.version=1.0.0
dubbo.protocol.payload=52428800
# dubbo 协议端口（ -1 表示自增端口，从 20880 开始）
dubbo.protocol.port=28080
# Dubbo 消费端订阅服务端的应用名，多个服务提供者用逗号分隔
# 这里订阅"自己"，会被忽略掉，请根据实际情况添加
dubbo.cloud.subscribed-services=${rootArtifactId}
# dubbo 服务扫描基准包
dubbo.scan.base-packages=${package}
#dubbo 元数据配置，减少注册中心的数据存储量，减少网络数据传输量，提升IO速度
dubbo.metadata-report.address=zookeeper://127.0.0.1:2181
#定时刷新关闭
dubbo.metadata-report.cycle-report=false
dubbo.metadata-report.retry-times=30
#dubbo.metadata-report.group=dubbo-dev
#dubbo.registry说明文档：http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-registry.html
dubbo.registry.address=127.0.0.1:2181
dubbo.registry.protocol=zookeeper
#dubbo.registry.file=/data/opt/cache/${rootArtifactId}.cache
#注册到注册中心的URL是否采用精简模式的
dubbo.registry.simplified=true
